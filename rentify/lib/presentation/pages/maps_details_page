import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:rentify/data/models/car.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:rentify/presentation/pages/booking_confirmation_splash.dart';

class MapsDetailsPage extends StatefulWidget {
  final Car car;

  const MapsDetailsPage({super.key, required this.car});

  @override
  State<MapsDetailsPage> createState() => _MapsDetailsPageState();
}

class _MapsDetailsPageState extends State<MapsDetailsPage> {
  // Add booking state
  bool _isBooked = false;

  // Store map controller as a class variable
  final MapController _mapController = MapController();
  // Default location (London)
  final LatLng _defaultLocation = LatLng(51.5, -0.09);

  void _scanQRCode(BuildContext context) {
    print("QR Code scan initiated"); 
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        content: SizedBox(
          width: 300,
          height: 300,
          child: MobileScanner(
            onDetect: (capture) {
              final barcodes = capture.barcodes;
              if (barcodes.isNotEmpty) {
                final value = barcodes.first.rawValue;
                if (value != null) {
                  final coordinates = value.split(',');
                  if (coordinates.length == 2) {
                    final lat = double.parse(coordinates[0]);
                    final lng = double.parse(coordinates[1]);
                    _launchGoogleMaps(lat, lng);
                    Navigator.of(context).pop();
                  }
                }
              }
            },
          ),
        ),
      ),
    );
  }

  // Recenter map to default location
  void _recenterMap() {
    _mapController.move(_defaultLocation, 13.0);
  }

  Future<void> _launchGoogleMaps(double lat, double lng) async {
    final url = 'https://www.google.com/maps/search/?api=1&query=$lat,$lng';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  // Add this new method to show QR code popup
  void _showQRCodePopup(BuildContext context) {
    // Generate Google Maps URL for QR code instead of just coordinates
    final mapsUrl = 'https://www.google.com/maps/search/?api=1&query=${_defaultLocation.latitude},${_defaultLocation.longitude}';
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Location QR Code'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 200,
              height: 200,
              child: QrImageView(
                data: mapsUrl, // Use the full Google Maps URL here
                version: QrVersions.auto,
                size: 200,
                backgroundColor: Colors.white,
              ),
            ),
            SizedBox(height: 20),
            Text('Scan to navigate to this location', 
                 style: TextStyle(color: Colors.grey)),
            SizedBox(height: 20),
            ElevatedButton.icon(
              icon: Icon(Icons.map),
              label: Text('Open in Maps'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                minimumSize: Size(double.infinity, 50),
              ),
              onPressed: () {
                Navigator.pop(context);
                _launchGoogleMaps(_defaultLocation.latitude, _defaultLocation.longitude);
              },
            ),
          ],
        ),
      ),
    );
  }

  // Add a method to handle car booking
  Future<void> _bookCar(Car car) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BookingConfirmationSplash(car: car),
      ),
    );
    
    if (result == true) {
      setState(() {
        _isBooked = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.qr_code_scanner),
            onPressed: () => _scanQRCode(context),
          ),
        ],
      ),
      body: Stack(
        children: [
          FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: _defaultLocation,
              initialZoom: 13,
            ),
            children: [
              TileLayer(
                urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                userAgentPackageName: 'com.example.rentify',
                subdomains: ['a', 'b', 'c'],
              ),
              MarkerLayer(
                markers: [
                  Marker(
                    point: _defaultLocation,
                    width: 80,
                    height: 80,
                    child: Icon(Icons.location_pin, color: Colors.red, size: 40),
                  ),
                ],
              ),
            ],
          ),
          // Control buttons column
          Positioned(
            right: 16,
            top: 100,
            child: Column(
              children: [
                // Recenter button
                FloatingActionButton(
                  onPressed: _recenterMap,
                  backgroundColor: Colors.white,
                  mini: true,
                  child: Icon(Icons.my_location, color: Colors.black),
                ),
                SizedBox(height: 10),
                // Direct navigation button
                FloatingActionButton(
                  onPressed: () => _launchGoogleMaps(_defaultLocation.latitude, _defaultLocation.longitude),
                  backgroundColor: Colors.white,
                  mini: true,
                  child: Icon(Icons.directions, color: Colors.blue),
                  tooltip: 'Navigate to this location',
                ),
                SizedBox(height: 10),
                // NEW QR Code share button 
                FloatingActionButton(
                  onPressed: () => _showQRCodePopup(context),
                  backgroundColor: Colors.white,
                  mini: true,
                  child: Icon(Icons.qr_code, color: Colors.black),
                  tooltip: 'Share location QR',
                ),
              ],
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: carDetailsCard(
              car: widget.car, 
              isBooked: _isBooked,
              onBookNow: _bookCar,
              context: context,
            ),
          ),
        ],
      ),
    );
  }
}

// Update carDetailsCard to accept isBooked parameter and onBookNow callback
Widget carDetailsCard({
  required Car car, 
  required bool isBooked, 
  required Function(Car) onBookNow,
  required BuildContext context,
}) {
  return SizedBox(
    height: 350,
    child: Stack(
      children: [
        Container(
          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
          width: double.infinity,
          decoration: BoxDecoration(
            color: Colors.black54,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(30),
              topRight: Radius.circular(30),
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, spreadRadius: 0, blurRadius: 10)
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(height: 20),
              Text(
                '${car.model}',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white),
              ),
              SizedBox(height: 10),
              Row(
                children: [
                  Icon(Icons.directions_car, color: Colors.white, size: 16),
                  SizedBox(width: 5),
                  Text(
                    '> ${car.distance} km',
                    style: TextStyle(color: Colors.white, fontSize: 14),
                  ),
                  SizedBox(width: 10),
                  Icon(Icons.battery_full, color: Colors.white, size: 14),
                  SizedBox(width: 5),
                  Text(
                    '${car.fuelCapacity.toString()}',
                    style: TextStyle(color: Colors.white, fontSize: 14),
                  ),
                ],
              ),
            ],
          ),
        ),
        Positioned(
          bottom: 0,
          left: 0,
          right: 0,
          child: Container(
            padding: EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(
                topRight: Radius.circular(20),
                topLeft: Radius.circular(20),
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "Features",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                featureIcons(),
                SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '\$${car.pricePerHour}/day',
                      style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                    ),
                    // Show "Book Now" button only if car is not booked yet
                    isBooked 
                      ? Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                          decoration: BoxDecoration(
                            color: Colors.green,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              Icon(Icons.check, color: Colors.white, size: 18),
                              SizedBox(width: 4),
                              Text(
                                'Booked',
                                style: TextStyle(color: Colors.white),
                              ),
                            ],
                          ),
                        )
                      : ElevatedButton(
                          onPressed: () => onBookNow(car),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.black),
                          child: Text(
                            'Book Now',
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                  ],
                ),
              ],
            ),
          ),
        ),
        Positioned(
          top: 50,
          right: 20,
          child: Image.asset('assets/white_car.png'),
        ),
      ],
    ),
  );
}

Widget featureIcons() {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    children: [
      featureIcon(Icons.local_gas_station, 'Diesel', 'Common Rail'),
      featureIcon(Icons.speed, 'Acceleration', '0 - 100km/s'),
      featureIcon(Icons.ac_unit, 'Cold', 'Temp Control'),
    ],
  );
}

Widget featureIcon(IconData icon, String title, String subtitle) {
  return Container(
    width: 100,
    height: 100,
    padding: EdgeInsets.all(5),
    decoration: BoxDecoration(
      borderRadius: BorderRadius.circular(10),
      border: Border.all(color: Colors.grey, width: 1),
    ),
    child: Column(
      children: [
        Icon(icon, size: 28),
        Text(title),
        Text(
          subtitle,
          style: TextStyle(color: Colors.grey, fontSize: 10),
        ),
      ],
    ),
  );
}
